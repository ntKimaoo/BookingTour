// <auto-generated />
using System;
using BookingTour.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookingTour.Migrations
{
    [DbContext(typeof(TourBookingSystemContext))]
    partial class TourBookingSystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookingTour.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("BookingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("DiscountAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfPeople")
                        .HasColumnType("int");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Unpaid");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("TourID");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VoucherId")
                        .HasColumnType("int")
                        .HasColumnName("VoucherID");

                    b.HasKey("BookingId")
                        .HasName("PK__Bookings__73951ACDEB54FE16");

                    b.HasIndex("TourId");

                    b.HasIndex("UserId");

                    b.HasIndex("VoucherId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("BookingTour.Models.BookingOption", b =>
                {
                    b.Property<int>("BookingOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BookingOptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingOptionId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<int>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("OptionID");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("BookingOptionId")
                        .HasName("PK__BookingO__4E01F3D280D24390");

                    b.HasIndex("BookingId");

                    b.HasIndex("OptionId");

                    b.ToTable("BookingOptions");
                });

            modelBuilder.Entity("BookingTour.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PaymentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int")
                        .HasColumnName("BookingID");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("PaymentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TransactionID");

                    b.HasKey("PaymentId")
                        .HasName("PK__Payments__9B556A588BA24255");

                    b.HasIndex("BookingId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("BookingTour.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId")
                        .HasName("PK__Roles__8AFACE3A5583DF1D");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B6160642B4857")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("BookingTour.Models.Tour", b =>
                {
                    b.Property<int>("TourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TourID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TourId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("TourName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Transport")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TourId")
                        .HasName("PK__Tours__604CEA1087E30E47");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("BookingTour.Models.TourCondition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ConditionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("TourID");

                    b.HasKey("ConditionId")
                        .HasName("PK__TourCond__37F5C0EF053FCAAA");

                    b.HasIndex("TourId");

                    b.ToTable("TourConditions");
                });

            modelBuilder.Entity("BookingTour.Models.TourImage", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"));

                    b.Property<string>("Caption")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("TourID");

                    b.HasKey("ImageId")
                        .HasName("PK__TourImag__7516F4ECD67AAD29");

                    b.HasIndex("TourId");

                    b.ToTable("TourImages");
                });

            modelBuilder.Entity("BookingTour.Models.TourOption", b =>
                {
                    b.Property<int>("OptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OptionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OptionId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("OptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PriceType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("PerPerson");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.HasKey("OptionId")
                        .HasName("PK__TourOpti__92C7A1DF97D55788");

                    b.ToTable("TourOptions");
                });

            modelBuilder.Entity("BookingTour.Models.TourOptionAvailable", b =>
                {
                    b.Property<int>("TourId")
                        .HasColumnType("int")
                        .HasColumnName("TourID");

                    b.Property<int>("OptionId")
                        .HasColumnType("int")
                        .HasColumnName("OptionID");

                    b.Property<bool?>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("TourId", "OptionId")
                        .HasName("PK__TourOpti__8960900DB6D8A6E3");

                    b.HasIndex("OptionId");

                    b.ToTable("TourOptionAvailable", (string)null);
                });

            modelBuilder.Entity("BookingTour.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<int?>("DefaultRoleId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultRoleID");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool?>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("ModifyDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK__Users__1788CCACF4482CB1");

                    b.HasIndex("DefaultRoleId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E4EEA04C8C")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookingTour.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserRoleID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<int?>("AssignedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("RoleID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("UserRoleId")
                        .HasName("PK__UserRole__3D978A5584E2A5EF");

                    b.HasIndex("AssignedBy");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "UserId", "RoleId" }, "UQ__UserRole__AF27604E61C79699")
                        .IsUnique();

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("BookingTour.Models.Voucher", b =>
                {
                    b.Property<int>("VoucherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VoucherID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoucherId"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("DiscountValue")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("MaxDiscountAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("MinOrderAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10, 2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Active");

                    b.Property<int?>("UsageLimit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("UsedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateOnly>("ValidFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly>("ValidTo")
                        .HasColumnType("date");

                    b.Property<string>("VoucherCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VoucherName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("VoucherId")
                        .HasName("PK__Vouchers__3AEE79C1A9B1930A");

                    b.HasIndex(new[] { "VoucherCode" }, "UQ__Vouchers__7F0ABCA920D22108")
                        .IsUnique();

                    b.ToTable("Vouchers");
                });

            modelBuilder.Entity("BookingTour.Models.Booking", b =>
                {
                    b.HasOne("BookingTour.Models.Tour", "Tour")
                        .WithMany("Bookings")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__TourID__5629CD9C");

                    b.HasOne("BookingTour.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Bookings__UserId__5535A963");

                    b.HasOne("BookingTour.Models.Voucher", "Voucher")
                        .WithMany("Bookings")
                        .HasForeignKey("VoucherId")
                        .HasConstraintName("FK__Bookings__Vouche__571DF1D5");

                    b.Navigation("Tour");

                    b.Navigation("User");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("BookingTour.Models.BookingOption", b =>
                {
                    b.HasOne("BookingTour.Models.Booking", "Booking")
                        .WithMany("BookingOptions")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingOp__Booki__59FA5E80");

                    b.HasOne("BookingTour.Models.TourOption", "Option")
                        .WithMany("BookingOptions")
                        .HasForeignKey("OptionId")
                        .IsRequired()
                        .HasConstraintName("FK__BookingOp__Optio__5AEE82B9");

                    b.Navigation("Booking");

                    b.Navigation("Option");
                });

            modelBuilder.Entity("BookingTour.Models.Payment", b =>
                {
                    b.HasOne("BookingTour.Models.Booking", "Booking")
                        .WithMany("Payments")
                        .HasForeignKey("BookingId")
                        .IsRequired()
                        .HasConstraintName("FK__Payments__Bookin__5EBF139D");

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("BookingTour.Models.TourCondition", b =>
                {
                    b.HasOne("BookingTour.Models.Tour", "Tour")
                        .WithMany("TourConditions")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TourCondi__TourI__66603565");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BookingTour.Models.TourImage", b =>
                {
                    b.HasOne("BookingTour.Models.Tour", "Tour")
                        .WithMany("TourImages")
                        .HasForeignKey("TourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__TourImage__TourI__628FA481");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BookingTour.Models.TourOptionAvailable", b =>
                {
                    b.HasOne("BookingTour.Models.TourOption", "Option")
                        .WithMany("TourOptionAvailables")
                        .HasForeignKey("OptionId")
                        .IsRequired()
                        .HasConstraintName("FK__TourOptio__Optio__4E88ABD4");

                    b.HasOne("BookingTour.Models.Tour", "Tour")
                        .WithMany("TourOptionAvailables")
                        .HasForeignKey("TourId")
                        .IsRequired()
                        .HasConstraintName("FK__TourOptio__TourI__4D94879B");

                    b.Navigation("Option");

                    b.Navigation("Tour");
                });

            modelBuilder.Entity("BookingTour.Models.User", b =>
                {
                    b.HasOne("BookingTour.Models.Role", "DefaultRole")
                        .WithMany("Users")
                        .HasForeignKey("DefaultRoleId")
                        .HasConstraintName("FK__Users__DefaultRo__73BA3083");

                    b.Navigation("DefaultRole");
                });

            modelBuilder.Entity("BookingTour.Models.UserRole", b =>
                {
                    b.HasOne("BookingTour.Models.User", "AssignedByNavigation")
                        .WithMany("UserRoleAssignedByNavigations")
                        .HasForeignKey("AssignedBy")
                        .HasConstraintName("FK__UserRoles__Assig__72C60C4A");

                    b.HasOne("BookingTour.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__RoleI__71D1E811");

                    b.HasOne("BookingTour.Models.User", "User")
                        .WithMany("UserRoleUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK__UserRoles__UserI__70DDC3D8");

                    b.Navigation("AssignedByNavigation");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BookingTour.Models.Booking", b =>
                {
                    b.Navigation("BookingOptions");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("BookingTour.Models.Role", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("BookingTour.Models.Tour", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("TourConditions");

                    b.Navigation("TourImages");

                    b.Navigation("TourOptionAvailables");
                });

            modelBuilder.Entity("BookingTour.Models.TourOption", b =>
                {
                    b.Navigation("BookingOptions");

                    b.Navigation("TourOptionAvailables");
                });

            modelBuilder.Entity("BookingTour.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("UserRoleAssignedByNavigations");

                    b.Navigation("UserRoleUsers");
                });

            modelBuilder.Entity("BookingTour.Models.Voucher", b =>
                {
                    b.Navigation("Bookings");
                });
#pragma warning restore 612, 618
        }
    }
}
